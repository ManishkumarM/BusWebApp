// <auto-generated />
using System;
using System.Collections.Generic;
using BusWebApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusWebApp.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<List<string>>("Amenities")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Arrival")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Departure")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NoOfSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("To")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Bus");
                });

            modelBuilder.Entity("BusWebApp.Models.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("BusWebApp.Models.CustomOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomOrder");
                });

            modelBuilder.Entity("BusWebApp.Models.CustomPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentId")
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomPayment");
                });

            modelBuilder.Entity("BusWebApp.Models.Passenger", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AadharId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("BusWebApp.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("BookedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("BusId")
                        .HasColumnType("integer");

                    b.Property<int?>("LockedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PassengerId")
                        .HasColumnType("text");

                    b.HasKey("SeatId");

                    b.HasIndex("BookedBy");

                    b.HasIndex("BusId");

                    b.HasIndex("LockedBy");

                    b.HasIndex("PassengerId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("BusWebApp.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("text");

                    b.Property<string>("ArrivalTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartureTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FareAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PassengerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeatId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TravelDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TicketId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("BusWebApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BusWebApp.Models.CustomOrder", b =>
                {
                    b.HasOne("BusWebApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusWebApp.Models.Seat", b =>
                {
                    b.HasOne("BusWebApp.Models.User", "BookedByUser")
                        .WithMany("BookedSeats")
                        .HasForeignKey("BookedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusWebApp.Models.Bus", null)
                        .WithMany("BookedSeats")
                        .HasForeignKey("BusId");

                    b.HasOne("BusWebApp.Models.User", "LockedByUser")
                        .WithMany("LockedSeats")
                        .HasForeignKey("LockedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusWebApp.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId");

                    b.Navigation("BookedByUser");

                    b.Navigation("LockedByUser");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("BusWebApp.Models.Ticket", b =>
                {
                    b.HasOne("BusWebApp.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("BusWebApp.Models.Bus", b =>
                {
                    b.Navigation("BookedSeats");
                });

            modelBuilder.Entity("BusWebApp.Models.User", b =>
                {
                    b.Navigation("BookedSeats");

                    b.Navigation("LockedSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
